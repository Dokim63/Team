package com.javalab.sec02;

/**
 * 정렬(sort)란?
 * - 데이터를 일정한 규칙에 따라 재배열하는 것을 의미
 * 버블정렬 (bubble sort)
 * - 정렬 알고리즘 중 하나 (선택정렬, 삽입정렬, 버블정렬)
 * - 서로 이웃한 데이터들을 비교하여 가장 큰 데이터를 뒤로 보내며 정렬하는 방식
 * - 더 큰 요소가 물의 거품처럼 배열의 끝으로 '떠오르는' 모습에서 유래한 이름
 * 15,11,1,3,8 순으로 나열된 데이터들이 있다고 가정
 * 1. 첫번째 데이터인 15와 두번째 데이터인 11을 비교해 큰 데이터를 뒤로 위치시킨다. 15가 크므로 둘의 위치를 바꾼다.
 * -> 11,15,1,3,8 순
 * 2. 두번째 데이터인 15와 세번째인 데이터 1을 비교하는데, 앞에 위치한 15가 크므로 둘의 위치를 바꾼다.
 * -> 11,1,15,3,8
 * 3. 동일하게 세번째인 데이터 15와 네번째 데이터인 3의 위치를 바꾼다.
 * -> 11,1,3,15,8
 * 4. 동일하게 네번째 데이터인 15와 마지막 데이터인 8의 위치를 바꿔준다. 가장 큰 데이터인 15는 가장 뒤에 위치하게 된다.
 * -> 11,1,3,8,15
 * 계속 반복해서 오름차순으로 정렬된다.
 * -> 1,3,8,11,15
 */
public class BubbleSort {
    public static void main(String[] args) {
        // 정렬할 배열을 선언하고 초기화합니다.
        int[] arr = {15, 11, 1, 3, 8};
        // 버블 정렬 함수를 호출하여 배열을 정렬합니다.
        bubbleSort(arr);
        // 정렬된 배열을 출력합니다.
        System.out.print("정렬된 배열: ");
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    // 버블 정렬 알고리즘을 구현한 함수입니다.
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        // 배열의 모든 요소를 탐색합니다.
        for (int i = 0; i < n - 1; i++) {
            // 각 패스마다 가장 큰 요소를 배열의 끝으로 이동시킵니다.
            for (int j = 0; j < n - i - 1; j++) {
                // 현재 요소와 다음 요소를 비교하여 정렬합니다.
                if (arr[j] > arr[j + 1]) {
                    // 두 요소를 교환합니다.
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}

